function [fv1, fv2, Simulation_results] = simulation(x_control)

num_well = 4;
num_step = 20;
lb = 0;
ub = 100;
x_control = x_control.* (ub - lb);
for k = 1:size(x_control,1)
    x = reshape(x_control(k,:),num_well, num_step);
    model = mphopen('fractured_geothermal_model.mph');
    model.component('comp1').func.create('pw1', 'Piecewise');
    model.component('comp1').func.create('pw2', 'Piecewise');
    model.component('comp1').func.create('pw3', 'Piecewise');
    model.component('comp1').func.create('pw4', 'Piecewise');
    
    model.component('comp1').func('pw1').set('pieces', {'0' '600' num2str(x(1,1));  ...
        '600' '1200' num2str(x(1,2));  ...
        '1200' '1800' num2str(x(1,3));  ...
        '1800' '2400' num2str(x(1,4));  ...
        '2400' '3000' num2str(x(1,5));  ...
        '3000' '3600' num2str(x(1,6));  ...
        '3600' '4200' num2str(x(1,7));  ...
        '4200' '4800' num2str(x(1,8));  ...
        '4800' '5400' num2str(x(1,9));  ...
        '5400' '6000' num2str(x(1,10));  ...
        '6000' '6600' num2str(x(1,11));  ...
        '6600' '7200' num2str(x(1,12));  ...
        '7200' '7800' num2str(x(1,13));  ...
        '7800' '8400' num2str(x(1,14));  ...
        '8400' '9000' num2str(x(1,15));  ...
        '9000' '9600' num2str(x(1,16));  ...
        '9600' '10200' num2str(x(1,17));  ...
        '10200' '10800' num2str(x(1,18));  ...
        '10800' '11400' num2str(x(1,19));  ...
        '11400' '12000' num2str(x(1,20))});
    model.component('comp1').func('pw1').set('argunit', 'd');
    model.component('comp1').func('pw1').set('fununit', 'kg/s');
    
    model.component('comp1').func('pw2').set('pieces', {'0' '600' num2str(x(2,1));  ...
        '600' '1200' num2str(x(2,2));  ...
        '1200' '1800' num2str(x(2,3));  ...
        '1800' '2400' num2str(x(2,4));  ...
        '2400' '3000' num2str(x(2,5));  ...
        '3000' '3600' num2str(x(2,6));  ...
        '3600' '4200' num2str(x(2,7));  ...
        '4200' '4800' num2str(x(2,8));  ...
        '4800' '5400' num2str(x(2,9));  ...
        '5400' '6000' num2str(x(2,10));  ...
        '6000' '6600' num2str(x(2,11));  ...
        '6600' '7200' num2str(x(2,12));  ...
        '7200' '7800' num2str(x(2,13));  ...
        '7800' '8400' num2str(x(2,14));  ...
        '8400' '9000' num2str(x(2,15));  ...
        '9000' '9600' num2str(x(2,16));  ...
        '9600' '10200' num2str(x(2,17));  ...
        '10200' '10800' num2str(x(2,18));  ...
        '10800' '11400' num2str(x(2,19));  ...
        '11400' '12000' num2str(x(2,20))});
    model.component('comp1').func('pw2').set('argunit', 'd');
    model.component('comp1').func('pw2').set('fununit', 'kg/s');
    
    model.component('comp1').func('pw3').set('pieces', {'0' '600' num2str(x(3,1));  ...
        '600' '1200' num2str(x(3,2));  ...
        '1200' '1800' num2str(x(3,3));  ...
        '1800' '2400' num2str(x(3,4));  ...
        '2400' '3000' num2str(x(3,5));  ...
        '3000' '3600' num2str(x(3,6));  ...
        '3600' '4200' num2str(x(3,7));  ...
        '4200' '4800' num2str(x(3,8));  ...
        '4800' '5400' num2str(x(3,9));  ...
        '5400' '6000' num2str(x(3,10));  ...
        '6000' '6600' num2str(x(3,11));  ...
        '6600' '7200' num2str(x(3,12));  ...
        '7200' '7800' num2str(x(3,13));  ...
        '7800' '8400' num2str(x(3,14));  ...
        '8400' '9000' num2str(x(3,15));  ...
        '9000' '9600' num2str(x(3,16));  ...
        '9600' '10200' num2str(x(3,17));  ...
        '10200' '10800' num2str(x(3,18));  ...
        '10800' '11400' num2str(x(3,19));  ...
        '11400' '12000' num2str(x(3,20))});
    model.component('comp1').func('pw3').set('argunit', 'd');
    model.component('comp1').func('pw3').set('fununit', 'kg/s');
    
    model.component('comp1').func('pw4').set('pieces', {'0' '600' num2str(x(4,1));  ...
        '600' '1200' num2str(x(4,2));  ...
        '1200' '1800' num2str(x(4,3));  ...
        '1800' '2400' num2str(x(4,4));  ...
        '2400' '3000' num2str(x(4,5));  ...
        '3000' '3600' num2str(x(4,6));  ...
        '3600' '4200' num2str(x(4,7));  ...
        '4200' '4800' num2str(x(4,8));  ...
        '4800' '5400' num2str(x(4,9));  ...
        '5400' '6000' num2str(x(4,10));  ...
        '6000' '6600' num2str(x(4,11));  ...
        '6600' '7200' num2str(x(4,12));  ...
        '7200' '7800' num2str(x(4,13));  ...
        '7800' '8400' num2str(x(4,14));  ...
        '8400' '9000' num2str(x(4,15));  ...
        '9000' '9600' num2str(x(4,16));  ...
        '9600' '10200' num2str(x(4,17));  ...
        '10200' '10800' num2str(x(4,18));  ...
        '10800' '11400' num2str(x(4,19));  ...
        '11400' '12000' num2str(x(4,20))});
    model.component('comp1').func('pw4').set('argunit', 'd');
    model.component('comp1').func('pw4').set('fununit', 'kg/s');
    
    model.study('std1').run
    path = cd;
    model.result.export('plot1').set('filename', [path,'\Well_pressure.txt']);
    model.result.export('plot2').set('filename', [path,'\Well_flux.txt']);
    model.result.export('plot3').set('filename', [path,'\Well_temperature.txt']);
    model.result.export('plot1').run;
    model.result.export('plot2').run;
    model.result.export('plot3').run;
    mphsave(model,'Optimal_fractured_geothermal_model.mph');
    fidin=fopen([path,'\Well_pressure.txt'],'r+t');
    i = 1;
    pressure = [];
    while ~feof(fidin)
        E=fgetl(fidin);
        if i >= 9
            pressure = [pressure; str2num(E)];
        end
        i = i + 1;
    end
    fclose(fidin);
    well_pressure = pressure(:,2)';
    well_pressure = reshape(well_pressure, 21,[]);
    
    % read the flux data of wells
    fidin=fopen([path,'\Well_flux.txt'],'r+t');
    i = 1;
    flux = [];
    while ~feof(fidin)
        E=fgetl(fidin);
        if i >= 9
            flux = [flux; str2num(E)];
        end
        i = i + 1;
    end
    fclose(fidin);
    well_flux = flux(:,2)';
    well_flux = reshape(well_flux, 21,[]);
    
    % read the temperature data of wells
    fidin=fopen([path,'\Well_temperature.txt'],'r+t');
    i = 1;
    temperature = [];
    while ~feof(fidin)
        E=fgetl(fidin);
        if i >= 9
            temperature = [temperature; str2num(E)];
        end
        i = i + 1;
    end
    fclose(fidin);
    well_temperature = temperature(:,2)';
    well_temperature = reshape(well_temperature, 21,[]);
    T_injec = 20+273.15;
    rho = 1000;
    Cp = 850;
    Step_length = 600*24*60*60;
    % Calculate the cumulative net thermal energy production
    CTEP = rho*Cp*(sum(well_flux(2:end,:).*(well_temperature(2:end,:)-T_injec).*Step_length,2));
    % Calculate the cumulative water production
    CWP = sum(well_flux(2:end,:).*Step_length,2);
    % Calculate the cumulative water injection
    CWI = sum(x(1:4,:)'.*Step_length,2);
    % Calculate NPV
    fv1(k,1) = -sum(CTEP(1:10) - 1E2.*CWP(1:10) - 1E2.*CWI(1:10));
    fv2(k,1) = -sum(CTEP - 1E2.*CWP - 1E2.*CWI);
    results{1} = well_flux;
    results{2} = well_temperature;
    results{3} = CTEP;
    results{4} = CWP;
    results{5} = CWI;
    Simulation_results{k,1} = results;
end


end